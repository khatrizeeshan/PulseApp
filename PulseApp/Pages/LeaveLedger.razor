@page "/leave-ledger"

@using PulseApp.Data
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject CalendarService CalendarService
@inject LeaveService LeaveService

<h1>Employees</h1>

<p>This page list the employees of the company.</p>

@if (EmployeeList == null || CalendarList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-start">
        <div class="form-group">
            <label for="attendanceType">Employee:</label>
            <select @bind="SelectedEmployeeId" @bind:event="oninput" @onchange="OnChangeEmployee" class="form-control" id="employee">
                <option value="0">[Choose]</option>
                @foreach (var employee in EmployeeList)
                {
                    <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="attendanceType">Calendar:</label>
            <select @bind="SelectedCalendarId" @bind:event="oninput" @onchange="OnChangeCalendar" class="form-control" id="calendar">
                <option value="0">[Choose]</option>
                @foreach (var calendar in CalendarList)
                {
                    <option value="@calendar.Id">@calendar.ToRangeString()</option>
                }
            </select>
        </div>
    </div>

    @if (EmployeeId > 0 && CalendarId > 0)
    {

        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Leave</th>
                    <th>Count</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var leave in Leaves)
                {
                    <tr>
                        <td>@leave.Date.ToShortDateString()</td>
                        <td>@leave.LeaveType</td>
                        <td>@leave.Count</td>
                    </tr>
                }
                @if (Leaves == null || Leaves.Length == 0)
                {
                    <tr>
                        <td colspan="3">No record found.</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private EmployeeDto[] EmployeeList { get; set; }

    private CalendarDto[] CalendarList { get; set; }

    private LeaveDto[] Leaves { get; set; }

    private int EmployeeId { get; set; }
    private int CalendarId { get; set; }

    private string SelectedEmployeeId { get; set; }
    private string SelectedCalendarId { get; set; }

    private bool ShowModal { get; set; }

    private AttendanceDto Current { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetEmployees();
        await GetCalendars();

        SelectedEmployeeId = "0";
        SelectedCalendarId = "0";
    }

    private async Task GetEmployees()
    {
        EmployeeList = await EmployeeService.GetEmployeesAsync();
    }

    private async Task GetCalendars()
    {
        CalendarList = await CalendarService.GetCalendarsAsync();
    }

    private async Task OnChangeEmployee(ChangeEventArgs e)
    {
        EmployeeId = int.Parse(SelectedEmployeeId);
        await LoadLeaves();
    }

    private async Task OnChangeCalendar(ChangeEventArgs e)
    {
        CalendarId = int.Parse(SelectedCalendarId);
        await LoadLeaves();
    }

    private async Task LoadLeaves()
    {
        if (EmployeeId == 0 || CalendarId == 0)
        {
            Leaves = Array.Empty<LeaveDto>();
        }
        else
        {
            Leaves = await LeaveService.GetLeaveLedger(EmployeeId, CalendarId);
        }
    }

    //private void GoAtEmployee(int id)
    //{
    //    NavigationManager.NavigateTo($"/employees/{id}");
    //}

    //private void GoAtAttendance(int id)
    //{
    //    NavigationManager.NavigateTo($"/employees/{id}/attendance/{DateTime.Today.Year}");
    //}
}
