@page "/attendance/{year:int}/{month:int}"

@using PulseApp.Data
@using PulseApp.Helpers
@using PulseApp.Constants

@inject NavigationManager NavigationManager
@inject AttendanceService AttendanceService

<h1>Attendance</h1>

<p>This page shows attendance of the selected day.</p>

@if (attendance == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="OnPrevious" type="button" class="btn btn-link">Previous</button>
    <h2 class="text-right">@MonthName, @Year</h2>
    <button @onclick="OnNext" type="button" class="btn btn-link">Next</button>

    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <th style="width: 13.2%">Employee</th>
                @for (int i = 1; i <= Days; i++)
                {
                    <th style="width: 2.8%" class="text-center">@i</th>
                }
                @for (int i = Days + 1; i <= 31; i++)
                {
                    <th style="width: 2.8%" class="table-secondary"></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in attendance)
            {
                <tr>
                    <td>@employee.FirstName @employee.LastName</td>
                    @for (int i = 1; i < employee.StartDay; i++)
                    {
                        <td class="table-secondary"></td>
                    }
                    @for (int i = employee.StartDay; i <= Days; i++)
                    {
                        var day = i;
                        employee.Attendance.TryGetValue(i, out TypeCodeCommentsDto detail);
                        <td class="text-center p-0">
                            <div class="d-flex flex-column align-content-center" style="height: 100%;">
                                <div style="cursor: pointer;" class="btn-light align-self-stretch" @onclick="async() => await MarkAttendance(employee.EmployeeId, day)"><small>@detail?.TypeCode.</small></div>
                                <div style="cursor: pointer;" class="mt-auto btn-warning align-self-stretch" @onclick="() => OnShowModal(employee.EmployeeId, day, detail?.TypeId, detail?.Comments)"><small>c</small></div>
                            </div>
                        </td>
                    }
                    @for (int i = Days + 1; i <= 31; i++)
                    {
                        <td class="table-secondary"></td>
                    }
                </tr>
            }
        </tbody>
    </table>

    @if (ShowModal && Current != null)
    {
        <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Mark Attendance</h4>
                        <button type="button" class="close" @onclick="OnCancelModal">&times;</button>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label for="attendanceType">Attendance Type:</label>
                            <select @bind="SelectedTypeId" class="form-control" id="attendanceType">
                                @foreach (var type in attendanceTypes)
                                {
                                    <option value="@type.Id">@type.Code - @type.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="comments">Comments</label>
                            <textarea @bind="Current.Comments" class="form-control" id="comments" rows="3"></textarea>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@OnCancelModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@OnConfirmModal>Save</button>
                    </div>

                </div>
            </div>
        </div>
    }

}

@code {

    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public int Month { get; set; }

    private string MonthName { get; set; }

    private DateTime FirstDay { get; set; }

    private int Days { get; set; }

    private MonthAttendanceDto[] attendance;
    private AttendanceType[] attendanceTypes;

    private bool ShowModal { get; set; }

    private AttendanceDto Current { get; set; }
    private string SelectedTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMonth();
        await GetAttendanceTypes();
    }

    private async Task LoadCurrentMonth()
    {
        MonthName = DateTimeHelper.GetMonthName(Month);
        FirstDay = new DateTime(Year, Month, 1);
        Days = DateTime.DaysInMonth(Year, Month);
        await Get();
    }

    private async Task Get()
    {
        attendance = await AttendanceService.GetMonthAttendanceAsync(Year, Month);
    }

    private async Task GetAttendanceTypes()
    {
        attendanceTypes = await AttendanceService.GetAttenanceTypesAsync();
    }

    private async Task MarkAttendance(int employeeId, int day)
    {
        await AttendanceService.MarkAttendanceAsync(employeeId, Year, Month, day);
        await Get();
    }

    private async Task MarkAttendance(AttendanceDto attendance)
    {
        await AttendanceService.MarkAttendanceAsync(attendance.EmployeeId, Year, Month, attendance.Day, attendance.TypeId, attendance.Comments);
        await Get();
    }

    private async Task OnNext()
    {
        var date = FirstDay.AddMonths(1);
        await Go(date);
    }

    private async Task OnPrevious()
    {
        var date = FirstDay.AddMonths(-1);
        await Go(date);
    }

    private async Task Go(DateTime date)
    {
        await Go(date.Year, date.Month);
    }

    private async Task Go(int year, int month)
    {
        NavigationManager.NavigateTo($"/attendance/{year}/{month}");
        Year = year;
        Month = month;
        await LoadCurrentMonth();
    }

    private void OnShowModal(int employeeId, int day, int? typeId, string comments = null)
    {
        Current = new AttendanceDto
        {
            EmployeeId = employeeId,
            Day = day,
            TypeId = typeId.GetValueOrDefault(AttendanceTypes.Full),
            Comments = comments,
        };

        SelectedTypeId = Current.TypeId.ToString();
        ShowModal = true;
    }

    private void OnCancelModal()
    {
        SelectedTypeId = null;
        Current = null;
        ShowModal = false;
    }

    private async Task OnConfirmModal()
    {
        Current.TypeId = int.Parse(SelectedTypeId);
        await MarkAttendance(Current);
        ShowModal = false;
    }

}
