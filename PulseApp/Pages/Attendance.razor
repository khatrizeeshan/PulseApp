@using PulseApp.Data
@using PulseApp.Constants

@inject AttendanceService AttendanceService

@if(AttendanceTypeList == null || LeaveTypeList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Mark Attendance</h4>
                    <button type="button" class="close" @onclick="OnCancelModal">&times;</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label for="attendanceType">Attendance Type:</label>
                        <select @bind="SelectedAttendanceTypeId" class="form-control" id="attendanceType">
                            @foreach (var type in AttendanceTypeList)
                            {
                                <option value="@type.Id">@type.Code - @type.Name</option>
                            }
                        </select>
                    </div>
                    @if (SelectedAttendanceTypeId == AttendanceTypes.Leave.ToString())
                    {
                        <div class="form-group">
                            <label for="leaveType">Leave Type:</label>
                            <select @bind="SelectedLeaveTypeId" class="form-control" id="leaveType">
                                @foreach (var type in LeaveTypeList)
                                {
                                    <option value="@type.Id">@type.Code - @type.Name</option>
                                }
                            </select>
                        </div>
                    }
                    <div class="form-group">
                        <label for="comments">Comments</label>
                        <textarea @bind="Current.Comments" class="form-control" id="comments" rows="3"></textarea>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@OnCancelModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@OnConfirmModal>Save</button>
                </div>

            </div>
        </div>
    </div>
}


@code {

    private AttendanceType[] AttendanceTypeList { get; set; }
    private LeaveType[] LeaveTypeList { get; set; }

    [Parameter]
    public AttendanceDto Current { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnConfirmCallback { get; set; }

    private string SelectedAttendanceTypeId { get; set; }

    private string SelectedLeaveTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAttendanceTypes();
        await GetLeaveTypes();

        SelectedAttendanceTypeId = Current.AttendanceTypeId.ToString();
        SelectedLeaveTypeId = Current.LeaveTypeId.ToString();
    }

    private async Task GetAttendanceTypes()
    {
        AttendanceTypeList = await AttendanceService.GetAttendanceTypesAsync();
    }

    private async Task GetLeaveTypes()
    {
        LeaveTypeList = await AttendanceService.GetLeaveTypesAsync();
    }

    private void OnCancelModal()
    {
        SelectedAttendanceTypeId = null;
        SelectedLeaveTypeId = null;
        Current = null;
        OnCancelCallback.InvokeAsync();
    }

    private void OnConfirmModal()
    {
        Current.AttendanceTypeId = int.Parse(SelectedAttendanceTypeId);
        Current.LeaveTypeId = int.Parse(SelectedLeaveTypeId);

        OnConfirmCallback.InvokeAsync();
    }
}
