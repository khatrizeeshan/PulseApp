@page "/employees/{id:int}"

@using PulseApp.Protos
@using Google.Protobuf.WellKnownTypes;

@inject NavigationManager NavigationManager
@inject EmployeeManager.EmployeeManagerClient EmployeeService

<h1>Employees</h1>

<p>This page list the employees of the company.</p>

@if (employee == null)
{
<p><em>Loading...</em></p>
}
else
{
<form>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="firstName">First Name</label>
            <input @bind="employee.FirstName" type="text" class="form-control" id="firstName" placeholder="First Name">
        </div>
        <div class="form-group col-md-6">
            <label for="lastName">Last Name</label>
            <input @bind="employee.LastName" type="text" class="form-control" id="lastName" placeholder="Last Name">
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="email">Email</label>
            <input @bind="employee.Email" type="email" class="form-control" id="email" placeholder="Email">
        </div>
        <div class="form-group col-md-6">
            <label for="joining">Joining</label>
            <input @bind="joining" type="text" class="form-control" id="joining" placeholder="Joining">
        </div>
    </div>
    <button type="button" @onclick="OnSave" class="btn btn-primary">Save</button>
</form>
}

@code {

    private EmployeeProto employee;

    private DateTime joining;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    private async Task Get()
    {
        if (Id > 0)
        {
            var request = new IdRequest() { Id = Id };
            var response = await EmployeeService.GetEmployeeAsync(request);
            employee = response.Employee;
            joining = employee.Joining.ToDateTime().ToLocalTime();
        }
        else
        {
            employee = new EmployeeProto();
            joining = DateTime.Today;
        }
    }

    private async Task OnSave()
    {
        if (Id > 0)
        {
            var request = new EmployeeUpdateRequest() { Id = Id, FirstName = employee.FirstName, LastName = employee.LastName, Email = employee.Email };
            await EmployeeService.UpdateEmployeeAsync(request);
        }
        else
        {
            var request = new EmployeeAddRequest() { FirstName = employee.FirstName, LastName = employee.LastName, Email = employee.Email, Joining = Timestamp.FromDateTime(joining.ToUniversalTime()) };
            var response = await EmployeeService.AddEmployeeAsync(request);
            GoAtEmployee(response.Id);
        }
    }

    private void GoAtEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/{id}");
    }
}

