@page "/employees"

@using PulseApp.Protos
@using PulseApp.Helpers

@inject NavigationManager NavigationManager
@inject EmployeeManager.EmployeeManagerClient EmployeeService

<h1>Employees</h1>

<p>This page list the employees of the company.</p>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input @oninput="OnFilter" />
    <button @onclick="OnAdd">Add</button>
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Joining</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Email</td>
                    <td>@employee.Joining.ToDateTime().ToShortDateString()</td>
                    <td>
                        <button type="button" @onclick="(() => OnEdit(employee.Id))">Edit</button>
                        <button type="button" @onclick="(() => OnDelete(employee.Id))">Delete</button>
                        <button type="button" @onclick="(() => OnAttendance(employee.Id))">Attendance</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private EmployeeProto[] _all;
    private EmployeeProto[] employees;

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
    }

    private async Task GetAll()
    {
        var request = new EmptyRequest();
        var response = await EmployeeService.GetEmployeesAsync(request);
        _all = response.Employees.ToArray();
        employees = _all;
    }

    private void OnFilter(ChangeEventArgs e)
    {
        var filter = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(filter))
        {
            employees = _all;
        }
        else
        {
            employees = _all.Where(e => e.FirstName.Contains(filter) || e.LastName.Contains(filter)).ToArray();
        }
    }

    private async Task OnDelete(int id)
    {
        var request = new IdRequest() { Id = id };
        await EmployeeService.DeleteEmployeeAsync(request);
        await GetAll();
    }

    private void OnEdit(int id)
    {
        GoAtEmployee(id);
    }

    private void OnAdd()
    {
        GoAtEmployee(0);
    }

    private void OnAttendance(int id)
    {
        GoAtAttendance(id);
    }

    private void GoAtEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/{id}");
    }

    private void GoAtAttendance(int id)
    {
        NavigationManager.NavigateTo($"/employees/{id}/attendance/{DateTime.Today.Year}");
    }
}
