@page "/attendance/{year:int}/{month:int}"

@using PulseApp.Protos
@using PulseApp.Helpers
@using PulseApp.Constants

@inject NavigationManager NavigationManager
@inject AttendanceManager.AttendanceManagerClient AttendanceService
@inject CalendarManager.CalendarManagerClient CalendarService

<h1>Attendance</h1>

<p>This page shows attendance of all employees for the selected month.</p>

@if (Employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-end">
        <button @onclick="OnPrevious" type="button" class="btn btn-link">Previous</button>
        <h2 class="text-right">@MonthName, @Year</h2>
        <button @onclick="OnNext" type="button" class="btn btn-link">Next</button>
    </div>

    if (Employees.Length > 0)
    {
        <table class="table table-bordered table-sm">
            <thead>
                <tr>
                    <th style="width: 13.2%">Employee</th>
                    @for (int i = 1; i <= Days; i++)
                    {
                        <th style="width: 2.8%" class="text-center @GetClass(i, "header")">@i</th>
                    }
                    @for (int i = Days + 1; i <= 31; i++)
                    {
                        <th style="width: 2.8%" class="table-secondary"></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in Employees)
                {
                    <tr>
                        <td>@employee.FirstName @employee.LastName</td>
                        @for (int i = 1; i < employee.StartDay; i++)
                        {
                            <td class="table-secondary"></td>
                        }
                        @for (int i = employee.StartDay; i <= Days; i++)
                        {
                            var day = i;
                            employee.Attendance.TryGetValue(i, out DayAttendanceDetailProto detail);
                            <td class="text-center p-0">
                                <div class="d-flex flex-column align-content-center" style="height: 100%;">
                                    <div style="cursor: pointer;" class="@GetClass(i, "main") align-self-stretch"
                                         @onclick="async() => await MarkAttendance(employee.EmployeeId, day)">
                                        <small>@detail?.LeaveTypeCode@detail?.AttendanceTypeCode.</small>
                                    </div>
                                    <div style="cursor: pointer;" class="mt-auto @GetClass(i, "detail") align-self-stretch"
                                         @onclick="() => OnShowModal(employee.EmployeeId, day, detail?.AttendanceTypeId,  detail?.LeaveTypeId, detail?.Comments)">
                                        <small>c</small>
                                    </div>
                                </div>
                            </td>
                        }
                        @for (int i = Days + 1; i <= 31; i++)
                        {
                            <td class="table-secondary"></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div>No record found for selected month.</div>
    }

    @if (ShowModal && Current != null)
    {
        <Attendance Current="Current" OnCancelCallback="OnCancelModal" OnConfirmCallback="OnConfirmModal"></Attendance>
    }

}

@code {

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Month { get; set; }

    private string MonthName { get; set; }

    private int Today { get; set; }

    private int[] OffDays { get; set; }

    private DateTime FirstDay { get; set; }

    private int Days { get; set; }

    private EmployeeAttendanceProto[] Employees { get; set; }

    private bool ShowModal { get; set; }

    private MarkAttendanceRequest Current { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMonth();
    }

    private async Task LoadCurrentMonth()
    {
        MonthName = DateTimeHelper.GetMonthName(Month);
        FirstDay = DateTimeHelper.FirstDay(Year, Month);
        Days = DateTime.DaysInMonth(Year, Month);

        var request = new YearMonthRequest() { Year = Year, Month = Month };
        var response = await CalendarService.GetOffDaysAsync(request);

        OffDays = response.Days.ToArray();

        Today = 0;
        if (DateTimeHelper.IsCurrentMonth(Year, Month))
        {
            Today = DateTime.Today.Day;
        }

        await Get();
    }

    private async Task Get()
    {
        var request = new MonthAttendanceRequest() { Month = Month, Year = Year };
        var response = await AttendanceService.GetMonthAttendanceAsync(request);
        Employees = response.Employees.ToArray();
    }

    private async Task MarkAttendance(int employeeId, int day)
    {
        var request = new MarkAttendanceRequest() { EmployeeId = employeeId, Year = Year, Month = Month, Day = day, AttendanceTypeId = Constants.AttendanceTypes.Full };
        await AttendanceService.MarkAttendanceAsync(request);
        await Get();
    }

    private async Task MarkAttendance(MarkAttendanceRequest request)
    {
        await AttendanceService.MarkAttendanceAsync(request);
        await Get();
    }

    private async Task OnNext()
    {
        var date = FirstDay.AddMonths(1);
        await Go(date);
    }

    private async Task OnPrevious()
    {
        var date = FirstDay.AddMonths(-1);
        await Go(date);
    }

    private async Task Go(DateTime date)
    {
        await Go(date.Year, date.Month);
    }

    private async Task Go(int year, int month)
    {
        NavigationManager.NavigateTo($"/attendance/{year}/{month}");
        Year = year;
        Month = month;
        await LoadCurrentMonth();
    }

    private void OnShowModal(int employeeId, int day, int? attendanceTypeId, int? leaveTypeId = null, string comments = null)
    {
        Current = new MarkAttendanceRequest
        {
            EmployeeId = employeeId,
            Day = day,
            Month = Month,
            Year = Year,
            AttendanceTypeId = attendanceTypeId.GetValueOrDefault(Constants.AttendanceTypes.Full),
            LeaveTypeId = leaveTypeId.GetValueOrDefault(Constants.LeaveTypes.Casual),
            Comments = comments != null ? comments : string.Empty,
        };

        ShowModal = true;
    }

    private void OnCancelModal()
    {
        Current = null;
        ShowModal = false;
    }

    private async Task OnConfirmModal()
    {
        await MarkAttendance(Current);
        ShowModal = false;
    }

    private string GetClass(int day, string position)
    {
        switch (position)
        {
            case "main":
                return OffDays.Contains(day) ? "btn-secondary" :
                                                day == Today ? "btn-info" : "btn-light";
            case "detail":
                return OffDays.Contains(day) ? "btn-secondary" :
                                                day == Today ? "btn-secondary" : "btn-warning";
            case "header":
                return OffDays.Contains(day) ? "table-secondary" :
                                                day == Today ? "table-info" : string.Empty;
        }

        return string.Empty;
    }
}
