@page "/calendars/{id:int}"

@using PulseApp.Protos
@using PulseApp.Constants
@using PulseApp.Helpers

@inject NavigationManager NavigationManager
@inject AttendanceManager.AttendanceManagerClient AttendanceService
@inject CalendarManager.CalendarManagerClient CalendarService

<h1>Calendar</h1>

<p>This page shows calendar to manage public holiday, off days and week ends.</p>

@if (CalendarDays == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-start">
        <div class="form-group">
            <label for="attendanceType">Calendar:</label>
            <select @bind="SelectedCalendarId" @bind:event="oninput" @onchange="OnChangeCalendar" class="form-control" id="calendar">
                @foreach (var calendar in CalendarList)
                {
                    <option value="@calendar.Id">@calendar.ToRangeString()</option>
                }
            </select>
            <button @onclick="OnShowAddModal" type="button" class="btn btn-link">Add</button>
        </div>
    </div>
    <div class="d-flex justify-content-end">
        <button @onclick="OnPrevious" type="button" class="btn btn-link">Previous</button>
        <h2 class="text-right">@SelectedCalendar.ToRangeString()</h2>
        <button @onclick="OnNext" type="button" class="btn btn-link">Next</button>
    </div>

    if (CalendarDays.Months.Count > 0)
    {
        <table class="table table-bordered table-sm">
            <thead>
                <tr>
                    <th style="width: 13.2%">Month</th>
                    @for (int i = 1; i <= 31; i++)
                    {
                        <th style="width: 2.8%" class="text-center">@i</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var month in CalendarDays.Months)
                {
                    <tr>
                        <td>@month.MonthName, @month.Year</td>
                        @for (int i = 1; i <= month.Days; i++)
                        {
                            var day = i;
                            month.CalendarDays.TryGetValue(i, out CalendarDayProto detail);
                            <td class="text-center p-0">
                                <div style="height: 100%;">
                                    <div style="cursor: pointer;" class="mt-auto @GetClass(detail, "main")"
                                         @onclick="() => OnShowDayModal(Id, day, month.Month, month.Year, detail?.DayTypeId, detail?.Comments)">
                                        <small>c</small>
                                    </div>
                                </div>
                            </td>
                        }
                        @for (int i = month.Days + 1; i <= 31; i++)
                        {
                            <td class="table-secondary"></td>
                        }
                    </tr>

                }
            </tbody>
        </table>

    }
    else
    {
        <div>No record found for selected year.</div>
    }

    @if (ShowCalendarDayModal && CurrentDay != null)
    {
        <CalendarDay Current="CurrentDay" OnCancelCallback="OnCancelDayModal" OnConfirmCallback="OnConfirmDayModal"></CalendarDay>
    }

    @if (ShowAddModal)
    {
        <Calendar Current="CurrentCalendar" OnCancelCallback="OnCancelAddModal" OnConfirmCallback="OnConfirmAddModal"></Calendar>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int Year { get; set; }

    private CalendarProto[] CalendarList { get; set; }

    private CalendarDaysResponse CalendarDays { get; set; }

    private string SelectedCalendarId { get; set; }

    private CalendarProto SelectedCalendar { get; set; }

    private int SelectedCalendarIndex { get; set; }

    private bool ShowCalendarDayModal { get; set; }

    private bool ShowAddModal { get; set; }

    private MarkDayRequest CurrentDay { get; set; }

    private CalendarProto CurrentCalendar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCalendars();
        await LoadCurrent();

        SelectedCalendarId = Id.ToString();
        SelectedCalendar = CalendarList.Single(c => c.Id == Id);
        SelectedCalendarIndex = Array.IndexOf(CalendarList, SelectedCalendar);
    }

    private async Task LoadCurrent()
    {
        await Get();
    }

    private async Task Get()
    {
        var request = new IdRequest() { Id = Id };
        CalendarDays = await CalendarService.GetCalendarDaysAsync(request);
    }

    private async Task GetCalendars()
    {
        var request = new EmptyRequest();
        var response = await CalendarService.GetCalendarsAsync(request);
        CalendarList = response.Calendars.ToArray();
    }


    private async Task MarkDay(MarkDayRequest request)
    {
        await CalendarService.MarkDayAsync(request);
        await Get();
    }

    private async Task AddCalendar(CalendarProto calendar)
    {
        var reqeuest = new CalendarAddRequest() { StartDate = calendar.StartDate, EndDate = calendar.EndDate };
        var response = await CalendarService.AddCalendarAsync(reqeuest);
        await GetCalendars();
        await Go(response.Id);
    }

    private async Task OnNext()
    {
        if (SelectedCalendarIndex < CalendarList.Length - 1)
        {
            this.SelectedCalendarIndex = SelectedCalendarIndex + 1;
            await Go(CalendarList[SelectedCalendarIndex].Id);
        }
    }

    private async Task OnPrevious()
    {
        if (SelectedCalendarIndex > 0)
        {
            this.SelectedCalendarIndex = SelectedCalendarIndex - 1;
            await Go(CalendarList[SelectedCalendarIndex].Id);
        }

    }

    private async Task Go(int id)
    {
        NavigationManager.NavigateTo($"/calendars/{id}");
        Id = id;
        SelectedCalendarId = Id.ToString();
        SelectedCalendar = CalendarList.Single(c => c.Id == Id);
        SelectedCalendarIndex = Array.IndexOf(CalendarList, SelectedCalendar);
        await LoadCurrent();
    }

    private async Task OnChangeCalendar(ChangeEventArgs e)
    {
        var id = int.Parse(SelectedCalendarId);
        await Go(id);
    }


    private void OnShowAddModal()
    {
        var start = DateTimeHelper.FirstDay();
        if (CalendarList.Any())
        {
            start = CalendarList.Max(c => c.EndDate.ToDateTime()).AddDays(1);
        }

        var end = start.AddYears(1).AddDays(-1);

        CurrentCalendar = new CalendarProto
        {
            StartDate = start.ToDate(),
            EndDate = end.ToDate(),
        };

        ShowAddModal = true;
    }

    private void OnCancelAddModal()
    {
        CurrentCalendar = null;
        ShowAddModal = false;
    }

    private async Task OnConfirmAddModal()
    {
        await AddCalendar(CurrentCalendar);
        ShowAddModal = false;
    }

    private void OnShowDayModal(int calendarId, int day, int month, int year, int? dayTypeId = null, string comments = null)
    {
        CurrentDay = new MarkDayRequest
        {
            CalendarId = calendarId,
            Day = day,
            Month = month,
            Year = year,
            DayTypeId = dayTypeId.GetValueOrDefault(DayTypes.Holiday),
            Comments = comments != null ? comments : string.Empty,
        };

        ShowCalendarDayModal = true;
    }

    private void OnCancelDayModal()
    {
        CurrentDay = null;
        ShowCalendarDayModal = false;
    }

    private async Task OnConfirmDayModal()
    {
        await MarkDay(CurrentDay);
        ShowCalendarDayModal = false;
    }

    private string GetClass(CalendarDayProto detail, string position)
    {
        switch (position)
        {
            case "main":
                return detail != null ? "btn-secondary" :
                                                //day == today ? "btn-info" :
                                                "btn-light";
                //case "header":
                //    return detail != null ? "table-secondary" :
                //                                    //day == today ? "table-info" :
                //                                    string.Empty;
        }

        return string.Empty;
    }
}
